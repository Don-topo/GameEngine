cmake_minimum_required(VERSION 3.30)

# c++ 17 is required
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set project name
project(GameEngine)

# Get dependencies
set(FETCHCONTENT_BASE_DIR ${CMAKE_BINARY_DIR}/_deps CACHE PATH "Dependencies download dir")
include(FetchContent)
set(FETCHCONTENT_QUIET OFF)

# VK-Boostrap
include(FetchContent)
FetchContent_Declare(
    vk_bootstrap
    GIT_REPOSITORY https://github.com/charles-lunarg/vk-bootstrap
    GIT_TAG v1.3.290
    GIT_SHALLOW TRUE
)

FetchContent_MakeAvailable(vk_bootstrap)
FetchContent_GetProperties(vk_bootstrap)
if(NOT vk_bootstrap_POPULATED)
    FetchContent_Populate(vk_bootstrap)
    add_subdirectory(${vk_bootstrap_SOURCE_DIR} ${vk_bootstrap_BINARY_DIR} EXCLUDE_FROM_ALL)
endif()

# Vulkan Memory Allocator (VMA)
  include(FetchContent)
  FetchContent_Declare(
    vma
    GIT_REPOSITORY https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator
    GIT_TAG v3.1.0
    GIT_SHALLOW TRUE
  )

  FetchContent_MakeAvailable(vma)

  FetchContent_GetProperties(vma)
  if(NOT vma_POPULATED)
    FetchContent_Populate(vma)
    add_subdirectory(${vma_SOURCE_DIR} EXCLUDE_FROM_ALL)
  endif()

# Generate VMA
set(VMA_IMPL_FILE ${CMAKE_CURRENT_BINARY_DIR}/vma.cpp)
file(WRITE ${VMA_IMPL_FILE} "#define VMA_IMPLEMENTATION\n#include \"vk_mem_alloc.h\"\n")


# SDL3
set(SDL_SHARED OFF CACHE BOOL "" FORCE)
set(SDL_STATIC ON CACHE BOOL "" FORCE)

include(FetchContent)
FetchContent_Declare(
  SDL3
  GIT_REPOSITORY https://github.com/libsdl-org/SDL.git
  GIT_TAG release-3.2.22
  GIT_SHALLOW TRUE  
)

FetchContent_MakeAvailable(SDL3)
FetchContent_GetProperties(SDL3)

# STB
FetchContent_Declare(
    stbi
    GIT_REPOSITORY https://github.com/nothings/stb
    GIT_TAG master
    GIT_SHALLOW TRUE
)

FetchContent_MakeAvailable(stbi)
FetchContent_GetProperties(stbi)
if(NOT stbi_POPULATED)
    FetchContent_Populate(stbi)
    add_subdirectory(${stbi_SOURCE_DIR} EXCLUDE_FROM_ALL)
endif()

# YAML-CPP
FetchContent_Declare(
    yaml-cpp
    GIT_REPOSITORY https://github.com/jbeder/yaml-cpp.git
    GIT_TAG 0.8.0
    GIT_SHALLOW TRUE
)
FetchContent_MakeAvailable(yaml-cpp)

# Assimp
FetchContent_Declare(
    assimp
    GIT_REPOSITORY https://github.com/assimp/assimp.git
    GIT_TAG v5.3.1
    GIT_SHALLOW TRUE
)

FetchContent_MakeAvailable(assimp)

# GLM
FetchContent_Declare(
    glm
    GIT_REPOSITORY https://github.com/g-truc/glm.git
    GIT_TAG 1.0.1
    GIT_SHALLOW TRUE
)

FetchContent_MakeAvailable(glm)

# Physx
#FetchContent_Declare(
#    physx
#    GIT_REPOSITORY https://github.com/NVIDIA-Omniverse/PhysX.git
#    GIT_TAG 107.3-physx-5.6.1
#    GIT_SHALLOW TRUE
#)

#FetchContent_MakeAvailable(physx)

# FMOD
if(NOT DEFINED FMOD_DIR)
    #set(FMOD_DIR "${CMAKE_SOURCE_DIR}/external/fmod") 
    set(FMOD_DIR "C:/Program Files (x86)/FMOD SoundSystem/FMOD Studio API Windows") 
endif()

set(FMOD_INCLUDE_DIR "${FMOD_DIR}/api/core/inc")
set(FMOD_LIB_DIR     "${FMOD_DIR}/api/core/lib")

file(GLOB SOURCES
    Main.cpp
    Engine/*.h
    Engine/*.cpp
    Logger/*.h
    Logger/*.cpp
    Timer/*.h
    Timer/*.cpp
    File/*.h
    File/*.cpp
    Texture/*.h
    Texture/*.cpp
    Audio/*.h
    Audio/*.cpp
    Camera/*.h
    Camera/*.cpp
    Render/*.h
    Render/*.cpp
    Render/Shader/*.h
    Render/Shader/*.cpp
    Render/Device/*.h
    Render/Device/*.cpp
    Render/CommandBuffer/*.h
    Render/CommandBuffer/*.cpp
    Render/CommandPool/*.h
    Render/CommandPool/*.cpp
    Render/Framebuffer/*.h
    Render/Framebuffer/*.cpp
    Render/Swapchain/*.h
    Render/Swapchain/*.cpp
    Render/Syncronization/*.h
    Render/Syncronization/*.cpp
    Render/RenderPass/*.h
    Render/RenderPass/*.cpp
    Render/Texture/*.h
    Render/Texture/*.cpp
    Render/Pipelines/*.h
    Render/Pipelines/*.cpp
    Render/PipelineLayout/*.h
    Render/PipelineLayout/*.cpp
    Render/IndexBuffer/*.h
    Render/IndexBuffer/*.cpp
    Render/UniformBuffer/*.h
    Render/UniformBuffer/*.cpp
    Render/VertexBuffer/*.h
    Render/VertexBuffer/*.cpp
    ${vk_bootstrap_SOURCE_DIR}/*.cpp
    ${VMA_IMPL_FILE}
)

add_executable(${PROJECT_NAME} ${SOURCES})

target_include_directories(${PROJECT_NAME} PRIVATE ${FMOD_INCLUDE_DIR})

if(WIN32)
    target_link_directories(${PROJECT_NAME} PRIVATE ${FMOD_LIB_DIR}/x64)
    target_link_libraries(${PROJECT_NAME} PRIVATE fmod_vc fmodL_vc) 

    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
            "${FMOD_LIB_DIR}/x64/fmod.dll"
            $<TARGET_FILE_DIR:${PROJECT_NAME}>
    )
    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
            "${FMOD_LIB_DIR}/x64/fmodL.dll"
            $<TARGET_FILE_DIR:${PROJECT_NAME}>
    )
    # fmod_vc.lib (release), fmodL_vc.lib (debug)
elseif(APPLE)
    target_link_directories(${PROJECT_NAME} PRIVATE ${FMOD_LIB_DIR})
    target_link_libraries(${PROJECT_NAME} PRIVATE fmod fmodL)
elseif(UNIX)
    target_link_directories(${PROJECT_NAME} PRIVATE ${FMOD_LIB_DIR}/x86_64)
    target_link_libraries(${PROJECT_NAME} PRIVATE fmod fmodL)
endif()

target_link_libraries(${PROJECT_NAME} PRIVATE assimp::assimp yaml-cpp)
target_include_directories(${PROJECT_NAME} PRIVATE ${assimp_SOURCE_DIR}/include)

target_include_directories(${PROJECT_NAME} PRIVATE
    ${vk_bootstrap_SOURCE_DIR}/src
    ${vma_SOURCE_DIR}/include
)

#target_link_libraries(${PROJECT_NAME} PRIVATE
#    PhysX_static_64
#    PhysXExtensions_static_64
#    PhysXCommon_static_64
#    PhysXFoundation_static_64
#    PhysXPvdSDK_static_64
#)

#target_include_directories(${PROJECT_NAME} PRIVATE
#    ${physx_SOURCE_DIR}/include
#)

# Intentar encontrar Vulkan
find_package(Vulkan REQUIRED)


if (Vulkan_FOUND)
    message(STATUS "Vulkan encontrado: ${Vulkan_LIBRARIES}")

    target_include_directories(${PROJECT_NAME} PRIVATE ${Vulkan_INCLUDE_DIRS})
    target_link_libraries(${PROJECT_NAME} PRIVATE ${Vulkan_LIBRARIES})

else()
    message(WARNING "No se pudo encontrar Vulkan con find_package. Intentando manualmente...")

    if (WIN32)
        # En Windows, usar la variable de entorno VULKAN_SDK
        set(VULKAN_SDK $ENV{VULKAN_SDK})
        if (NOT VULKAN_SDK)
            message(FATAL_ERROR "No se encontró la variable de entorno VULKAN_SDK. Instala el Vulkan SDK de LunarG.")
        endif()

        include_directories(${VULKAN_SDK}/Include)
        link_directories(${VULKAN_SDK}/Lib)

        target_link_libraries(${PROJECT_NAME} PRIVATE vulkan-1)

    elseif(UNIX)
        # En Linux, asumir que el paquete libvulkan está instalado
        find_library(VULKAN_LIB vulkan)
        if (NOT VULKAN_LIB)
            message(FATAL_ERROR "No se encontró libvulkan. Instala Vulkan (ej: sudo apt install libvulkan-dev).")
        endif()

        target_link_libraries(${PROJECT_NAME} PRIVATE ${VULKAN_LIB})

    else()
        message(FATAL_ERROR "Plataforma no soportada aún en este script")
    endif()
endif()

# Incluir directorios de Vulkan
target_include_directories(${PROJECT_NAME} PRIVATE ${Vulkan_INCLUDE_DIRS})

# Vincular librerías de Vulkan
target_link_libraries(${PROJECT_NAME} PRIVATE ${Vulkan_LIBRARIES})

add_definitions(-DGLM_FORCE_DEPTH_ZERO_TO_ONE)

target_include_directories(${PROJECT_NAME} PRIVATE ${glm_SOURCE_DIR})


# TODO Compile shaders to spir-v
file(GLOB GLSL_SOURCE_FILES
  shader/*.frag
  shader/*.vert
  shader/*.comp
)

if(Vulkan_GLSLC_EXECUTABLE)
  message("Using glslc to compile shaders")
  foreach(GLSL ${GLSL_SOURCE_FILES})
    get_filename_component(FILE_NAME ${GLSL} NAME)
    set(SPIRV "${CMAKE_SOURCE_DIR}/Shaders/${FILE_NAME}.spv")
    add_custom_command(
      OUTPUT ${SPIRV}
      COMMAND ${Vulkan_GLSLC_EXECUTABLE} -o ${SPIRV} ${GLSL}
      DEPENDS ${GLSL})
    list(APPEND SPIRV_BINARY_FILES ${SPIRV})
  endforeach(GLSL)
elseif (Vulkan_GLSLANG_VALIDATOR_EXECUTABLE)
  message("Using glslangValidator to compile shaders")
  foreach(GLSL ${GLSL_SOURCE_FILES})
    get_filename_component(FILE_NAME ${GLSL} NAME)
    set(SPIRV "${CMAKE_SOURCE_DIR}/Shaders/${FILE_NAME}.spv")
    add_custom_command(
      OUTPUT ${SPIRV}
      COMMAND ${Vulkan_GLSLANG_VALIDATOR_EXECUTABLE} -V -o ${SPIRV} ${GLSL}
      DEPENDS ${GLSL})
    list(APPEND SPIRV_BINARY_FILES ${SPIRV})
  endforeach(GLSL)
endif()

add_custom_target(
  Shaders
  DEPENDS ${SPIRV_BINARY_FILES}
)
add_dependencies(${PROJECT_NAME} Shaders)

add_custom_command(TARGET Shaders POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy_directory
  "$<TARGET_PROPERTY:${PROJECT_NAME},SOURCE_DIR>/Shaders"
  "$<TARGET_PROPERTY:${PROJECT_NAME},BINARY_DIR>/$<CONFIGURATION>/Shaders"
)

if(MSVC)
  target_link_libraries(${PROJECT_NAME} PRIVATE vk-bootstrap SDL3-static)
else()
  target_link_libraries(${PROJECT_NAME} PRIVATE vk-bootstrap SDL3-static stdc++ m)
endif()

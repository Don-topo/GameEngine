cmake_minimum_required(VERSION 3.30)

# c++ 17 is required
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set project name
project(GameEngine)

# Get dependencies
set(FETCHCONTENT_BASE_DIR ${CMAKE_BINARY_DIR}/_deps CACHE PATH "Dependencies download dir")
include(FetchContent)
set(FETCHCONTENT_QUIET OFF)

# VK-Boostrap
include(FetchContent)
FetchContent_Declare(
    vk_bootstrap
    GIT_REPOSITORY https://github.com/charles-lunarg/vk-bootstrap
    GIT_TAG v1.3.290
    GIT_SHALLOW TRUE
)

FetchContent_MakeAvailable(vk_bootstrap)
FetchContent_GetProperties(vk_bootstrap)
if(NOT vk_bootstrap_POPULATED)
    FetchContent_Populate(vk_bootstrap)
    add_subdirectory(${vk_bootstrap_SOURCE_DIR} ${vk_bootstrap_BINARY_DIR} EXCLUDE_FROM_ALL)
endif()

set( _vma_SOURCE_SEARCH_DIRS
"/usr/include"
"/usr/local/include"
"${CMAKE_SOURCE_DIR}/includes"
"${CMAKE_SOURCE_DIR}/src"
$ENV{PROGRAMFILES}/include
$ENV{VK_SDK_PATH}/include 
${VMA_ROOT_DIR}/include )

# Check environment for root search directory
set( _vma_ENV_ROOT_DIR $ENV{VMA_ROOT_DIR} )
if( NOT VMA_ROOT_DIR AND _vma_ENV_ROOT_DIR )
	set(VMA_ROOT_DIR ${_vma_ENV_ROOT_DIR} )
endif()

# Put user specified location at beginning of search
if( VMA_ROOT_DIR )
	list( INSERT _vma_SOURCE_SEARCH_DIRS 0 "${VMA_ROOT_DIR}/include" )
endif()

# Search for the source file
FIND_PATH(VMA_SOURCE_DIR "vma/vk_mem_alloc.h"
PATHS ${_vma_SOURCE_SEARCH_DIRS} )

INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(vma DEFAULT_MSG VMA_SOURCE_DIR)

# Vulkan Memory Allocator (VMA)
if (NOT DEFINED ENV{VK_SDK_PATH})
  include(FetchContent)
  FetchContent_Declare(
    vma
    GIT_REPOSITORY https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator
    GIT_TAG        v3.1.0
    GIT_SHALLOW 1
  )

  FetchContent_MakeAvailable(vma)

  FetchContent_GetProperties(vma)
  if(NOT vma_POPULATED)
    FetchContent_Populate(vma)
    add_subdirectory(${vma_SOURCE_DIR} EXCLUDE_FROM_ALL)
  endif()

  # set variable that will be used later
  set(VMA_INCLUDE_DIR ${vma_SOURCE_DIR}/vma)
endif()

# SDL 3
set(SDL_SHARED OFF CACHE BOOL "" FORCE)
set(SDL_STATIC ON CACHE BOOL "" FORCE)

include(FetchContent)
FetchContent_Declare(
  SDL3
  GIT_REPOSITORY https://github.com/libsdl-org/SDL.git
  GIT_TAG release-3.2.22
  GIT_SHALLOW TRUE  
)

FetchContent_MakeAvailable(SDL3)
FetchContent_GetProperties(SDL3)

# STB
FetchContent_Declare(
    stbi
    GIT_REPOSITORY https://github.com/nothings/stb
    GIT_TAG master
    GIT_SHALLOW TRUE
)

FetchContent_MakeAvailable(stbi)
FetchContent_GetProperties(stbi)
if(NOT stbi_POPULATED)
    FetchContent_Populate(stbi)
    add_subdirectory(${stbi_SOURCE_DIR} EXCLUDE_FROM_ALL)
endif()

# YAML-CPP
#if(WIN32 AND NOT MINGW)
#  FetchContent_Declare
#endif()

file(GLOB SOURCES
    Main.cpp
    Engine/*.h
    Engine/*.cpp
    Logger/*.h
    Logger/*.cpp
    Render/*.h
    Render/*.cpp
    Render/CommandBuffer/*h
    Render/CommandBuffer/*cpp
    Render/CommandPool/*h
    Render/CommandPool/*cpp
    ${vk_bootstrap_SOURCE_DIR}/*.cpp
)

#find_package(SDL3 REQUIRED)

add_executable(${PROJECT_NAME} ${SOURCES})

target_include_directories(${PROJECT_NAME} PRIVATE
    ${vk_bootstrap_SOURCE_DIR}/src
    ${VMA_SOURCE_DIR}/vma
)

if(MSVC)
  target_link_libraries(${PROJECT_NAME} PRIVATE vk-bootstrap SDL3-static)
else()
  target_link_libraries(${PROJECT_NAME} PRIVATE vk-bootstrap SDL3-static stdc++ m)
endif()
